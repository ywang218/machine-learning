// achieved in Jupitor notebook

import numpy as np
import random

x1 = 2 * np.random.rand(100, 1)
x2 = 2 * np.random.rand(100, 1)
y = 3 * x1 + 4 * x2 + np.random.rand(100, 1) + 2

x1 = x1.reshape((100, 1))
print(x1.shape)
x2 = x2.reshape((100, 1))
print(x2.shape)
x3 = np.ones((100, 1))
print(x3.shape)
x = np.hstack((x1, x2, x3))
print(x.shape)
print(x[0,:])
y = y.reshape((100,))
print(y.shape)

# m denotes the number of examples here, not the number of features
def gradientDescent(x, y, theta, alpha, m, numIterations):
    xTrans = x.transpose()
    for i in range(0, numIterations):
        hypothesis = np.dot(x, theta)
        loss = hypothesis - y
        # avg cost per example (the 2 in 2*m doesn't really matter here.
        # But to be consistent with the gradient, I include it)
        cost = np.sum(loss ** 2) / (2 * m)
        #print("Iteration %d | Cost: %f" % (i, cost))
        # avg gradient per example
        gradient = np.dot(xTrans, loss) / m
        # update
        theta = theta - alpha * gradient
    return theta
    
    
 m, n = np.shape(x)
 numIterations= 10000
 alpha = 0.005
 theta = np.ones(n)
 theta = gradientDescent(x, y, theta, alpha, m, numIterations)
 print(theta)
 

